var searchIndex = {};
searchIndex['semver'] = {"items":[[0,"","semver","Semantic version parsing and comparison."],[3,"Version","","Represents a version number conforming to the semantic versioning scheme."],[12,"major","","The major version, to be incremented on incompatible changes.",0],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0],[12,"pre","","The pre-release version identifier, if one exists.",0],[12,"build","","The build metadata, ignored when determining version precedence.",0],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints."],[4,"Identifier","","An identifier in the pre-release or build metadata."],[13,"Numeric","","An identifier that's solely numbers.",1],[13,"AlphaNumeric","","An identifier with letters and numbers.",1],[4,"ParseError","","A `ParseError` is returned as the `Err` side of a `Result` when a version is attempted\nto be parsed."],[13,"NonAsciiIdentifier","","All identifiers must be ASCII.",2],[13,"IncorrectParse","","The version was mis-parsed.",2],[13,"GenericFailure","","Any other failure.",2],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur."],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3],[13,"InvalidSigil","","The sigil you have written is not correct.",3],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3],[13,"MajorVersionRequired","","At least a major version is required.",3],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3],[11,"fmt","","",1],[11,"hash","","",1],[11,"cmp","","",1],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"fmt","","",0],[11,"clone","","",0],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"parse","","Parse a string into a semver object.",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"partial_cmp","","",0],[11,"cmp","","",0],[11,"fmt","","",2],[11,"hash","","",0],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"description","","",3],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `\"^1.2.3\"`\nand turns it into a `VersionReq` that matches that particular constraint.",4],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4],[11,"fmt","","",4]],"paths":[[3,"Version"],[4,"Identifier"],[4,"ParseError"],[4,"ReqParseError"],[3,"VersionReq"]]};
initSearch(searchIndex);
